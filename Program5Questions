1.Solution to Validate the Email address
*************************************
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.regex.*; 

public class Solution {

    public static void main(String[] args) throws Exception {
    String regex="[a-z]{1,6}_?[0-9]{0,4}@hackerrank.com$";
			
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int num =Integer.parseInt( br.readLine()); 
        String email="";
    for (int i=0; i<num; i++ )
    {
     email=br.readLine();
     Pattern pattern = Pattern.compile(regex);
     
     Matcher matcher = pattern.matcher(email);
    System.out.println(matcher.matches());
    }
       
    }
}
*************************************
2.Prime Or Not=>Prime lowest divisor
*************************************
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Solution {

    public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        long num =Long.parseLong( br.readLine()); 
       boolean flag=false;
       int i;
       for( i=2; i<=Math.sqrt(num); i++)
       {
           if(num%i==0)
           {
               flag=true;
               break;
           }
       }
       if(flag)
        System.out.println(i);
        else
        System.out.println(1);     
    }
}
*************************************
3.Detecting valid Latitide & Longtitude pairs
*************************************
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.regex.*; 

public class Solution {

    public static void main(String[] args) throws Exception{

        //90.000-90
        //89.99999-10.000
        //9.9999-0

        //180.000-180
        //179.9999-100.0000
        //99.99999-10.00000
        //9.9999-0

       
    String latitude= "[+-]?(90(\\.0+)?|[1-8]\\d(\\.\\d+)?|\\d(\\.\\d+)?)";
    String longitude="[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|[1-9]\\d(\\.\\d+)?|\\d(\\.\\d+)?)";

        String regex="^\\("+latitude+",\\s"+longitude+"\\)$";

         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

         int num=Integer.parseInt(br.readLine());
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher;String location;
     for(int i=0; i<num; i++)
     {      matcher=pattern.matcher(br.readLine());
          if(!matcher.matches())
    {
         System.out.println("InValid");
    }
    else
        System.out.println("Valid");
       
     }
   
    }
}
*************************************
4.Fizz BUzz
*************************************
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Solution {

    public static void main(String[] args) throws Exception{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int num=Integer.parseInt(br.readLine());

        for(int i=1; i<=num; i++)
        {
            if(i%3==0 && i%5==0)
            {
                System.out.println("FizzBuzz");
            }
            else if (i%3==0 )
            {
                 System.out.println("Fizz");
            }
             else if (i%5==0 )
            {
                 System.out.println("Buzz");
            }
            else 
             System.out.println(i);
        }
   
    }
}
*************************************
5.IP Address Validation
*************************************
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

      public static String isValidIP(String ip)
      {
          if(isIPV4Reg(ip)) return "IPv4";
	  //if(isIPV4(ip)) return "IPv4";
           if(isIPV6Reg(ip)) return "IPv6";
	   // if(isIPV6(ip)) return "IPv6";
           return "Neither";
      }
    public static boolean isIPV4Reg(String ip)
    { String ipv4Pattern="^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$";
        return (ip.matches(ipv4Pattern));
    }

     public static boolean isIPV6Reg(String ip)
    {   String ipv6Pattern="^([0-9a-fA-F]{1,4}\\:){7}([0-9a-fA-F]{1,4})$";
        return (ip.matches(ipv6Pattern));
    }
    public static boolean isIPV4(String ip)
{    int charLen=ip.length()-ip.replace(".", "").length();

       if(charLen!=3)
       {
           return false;
       }
       String [] ipArr= ip.split("\\.");
    
       if(ipArr.length!=4)
       {
            return false;
       }
       for(String part:ipArr)
       {
           if(Integer.parseInt(part)>255 ||Integer.parseInt(part)<0 )
           return false;
       }
       return true;
    
}

public static boolean isIPV6(String ip)
{    int charLen=ip.length()-ip.replace(":", "").length();

       if(charLen!=7)
       {
           return false;
       }
       String [] ipArr= ip.split("\\:");
    
       if(ipArr.length!=8)
       {
            return false;
       }
       for(String part:ipArr)
       {
           if(part.length()>4 || part.length()<1) return false;
           for(int i=0; i<=part.length()-1; i++)
           {    char c =  Character.toLowerCase(part.charAt(i));
           if(!(c >= '0' && c <= '9') && !(c >= 'a' && c<= 'f') ) return false;
             
       }
       }
       return true;
    
}

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int num =Integer.parseInt( br.readLine()); 
    
     for (int i=0; i<num; ++i)
    {
        System.out.println(isValidIP(br.readLine()));
      
    }
}
}


